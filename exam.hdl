module top_module (
    input ring,
    input vibrate_mode,
    output ringer,       // Make sound
    output motor         // Vibrate
);
   assign ringer = (ring & ~vibrate_mode);
   assign motor  = (ring & vibrate_mode);
   
endmodule // top_module


module top_module (
    input too_cold,
    input too_hot,
    input mode,
    input fan_on,
    output heater,
    output aircon,
    output fan
); 
   assign heater = ( mode & too_cold);
   assign aircon = ( ~mode & too_hot);
   assign fan =  fan_on | heater | aircon;
   
   
endmodule // top_module

module top_module( 
    input [2:0] in,
    output reg [1:0] out );

   always @(*) begin
      out = 0;      
      for(int i=0; i<3; i++) begin
	 out =  out + in[i];	 
      end      
   end
endmodule // top_module



module top_module( 
    input [3:0] in,
    output  reg [2:0] out_both,
    output  reg [3:1] out_any,
    output  reg [3:0] out_different );

      always @(*) begin
      for(int i=0; i<3; i++) begin
	 out =  out + in[i];	 
      end      
   end

endmodule // top_module

module top_module(
		     input [99:0]  in,
		     output  reg [98:0] out_both,
		     output  reg [99:1] out_any,
		     output  reg [99:0] out_different );

   always @(*) begin
      for(int i=0; i<$bits(out_both); i++) begin
	 out_both[i] = in[i] & in[i+1];	 
      end      
      
      out_any = in[99:1] | in[98:0];
      
      for(int i=0; i<$bits(out_different); i++) begin
	 out_different[i] = in[i] ^ in[(i+1) % $bits(out_different)];	 
      end     
      
   end // always @ (*)

   
   
endmodule // top_module

module top_module( 
    input [15:0] a, b, c, d, e, f, g, h, i,
    input [3:0] sel,
    output reg [15:0] out );
    
    always@(*) begin
    case (sel)
        4'b0000: out = a;
        4'b0001: out = b;
        4'b0010: out = c;
        4'b0011: out = d;
        4'b0100: out = e;
        4'b0101: out = f;
        4'b0110: out = g;
        4'b0111: out = h;
        4'b1000: out = i;
        default: out = {16{1'b1}};        
    endcase
    end
endmodule

module top_module( 
		   input [255:0] in,
		   input [7:0] 	 sel,
		   output 	 out );

   integer 			 i;
   assign i =  sel;
   assign out=in[i];
   
endmodule


module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

   integer 	 i;
   assign i =  sel;
   assign out={in[4*i+3],in[4*i+2],in[4*i+1],in[4*i]};

endmodule

module top_module( 
    input [2:0] a, b,
    input cin,
    output [2:0] cout,
    output [2:0] sum );

   add add_3 [2:0] (a,b,{cout[1:0],cin},sum, cout);
   
endmodule


module add ( input a, input b, input cin,   output sum, output cout );

   // Full adder module here
   assign {cout, sum} = a + b + cin;
   
endmodule


module top_module (
    input [3:0] x,
    input [3:0] y, 
    output [4:0] sum);

   wire [2:0] 	 cout;
   
   add add_4 [3:0] (x,y, {cout, 1'b0}, sum[3:0], {sum[4], cout});
   
endmodule


module add ( input a, input b, input cin,   output sum, output cout );

   // Full adder module here
   assign {cout, sum} = a + b + cin;
   
endmodule


module top_module (
    input [7:0]  a,
    input [7:0]  b, 
    output [7:0] s,
    output 	 overflow);

   
   assign s = a + b;

   assign overflow = (~a[7]  & ~b[7] & s[7]) || (a[7] & b[7] & ~s[7]) ? 1 : 0;
   
endmodule // top_module




module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

   wire [2:0] 	  adder_cout;
   
   bcd_fadd adder [3:0] (.a(a), 
			 .b(b), 
			 .cin({adder_cout, cin}),
			 .cout({cout, adder_cout}), 
			 .sum(sum));
   
   
endmodule


module top_module(
    input a,
    input b,
    input c,
    input d,
    output out  ); 
   assign out = (4'b0000 == {a,b,c,d}) ||
		(4'b0001 == {a,b,c,d}) ||
		(4'b0100 == {a,b,c,d}) || 
		(4'b0101 == {a,b,c,d}) || 
		(4'b0111 == {a,b,c,d}) || 
		(4'b0110 == {a,b,c,d}) ? 0 : 1
		
endmodule

module top_module(
    input a,
    input b,
    input c,
    input d,
    output out  ); 

   assign out = ({a,b} == { c,d } || {a,b} == ~{ c,d } ) ? 0 : 1;
   
endmodule


module top_module (
    input [4:1] x, 
    output f );

   assign f = x[1]*x[2]* ~x[3]*x[4] +
	      ~x[1]*~x[2]* x[3]*x[4] +
	      ~x[1]*x[2]* x[3]*x[4] +
	      ~x[1]*~x[2]* x[3]*~x[4] +
	      ~x[1]*x[2]* x[3]*~x[4];
   
endmodule // top_module


module top_module (
    input [4:1] x,
    output f
); 
   assign f = ~x[1]*~x[2]* ~x[3]*~x[4] +
	      x[1]*~x[2]* ~x[3]*~x[4] +
	      ~x[1]*~x[2]* x[3]*x[4] +
	      ~x[1]*x[2]* x[3]*x[4] +
	      x[1]*x[2]* x[3]*x[4] +
	      ~x[1]*~x[2]* x[3]*~x[4] +
	      ~x[1]*x[2]* x[3]*~x[4] +
	      x[1]*~x[2]* x[3]*~x[4] ;
   
endmodule // top_module


module top_module (
    input c,
    input d,
    output [3:0] mux_in
); 

   assign mux_in = (~c && ~d) * 4'b0100 +
		   (~c &&  d) * 4'b0001+
		   (c && d  ) * 4'b1001 +
		   (c && ~d )  * 4'b0101;
   
endmodule


 else begin
        if (resetn) begin
            q[8:15] = 8'b0000_0000;	
        end
        else begin
            q[8:15] =  d[8:15]; 
        end
    end



module top_module (
    input d, 
    input ena,
    output q);

    always @(d) begin
       if (ena) begin
	  q <=  d;
       end       
    end
endmodule


module top_module (
    input clk,
    input d, 
    input ar,   // asynchronous reset
    output q);
    always @(posedge clk, posedge ar) begin
        if(ar) begin
           q <= 1'b0;
        end
        else begin
            q <= d;
        end
            
    end
endmodule

module top_module (
    input clk,
    input d, 
    input r,   // synchronous reset
    output q);
    always @(posedge clk) begin
        if(r) begin
           q = 1'b0;
        end
        else begin
            q = d;
        end
            
    end
endmodule

// DFF with gate. TODO
module top_module (
		   input  clk,
		   input  in, 
		   output out);

   wire 		  d;
   wire 		  q;
   
   always @(posedge clk) begin
      q <= d;
      out <= q;      
      d <= in ^ q;      
   end

endmodule


module top_module (
	input clk,
	input L,
	input r_in,
	input q_in,
	output reg Q);

   always @(posedge clk) begin
      Q = L ? r_in : q_in;      
   end
endmodule // top_module


module top_module (
    input clk,
    input w, R, E, L,
    output Q
);

   always @(posedge clk) begin
      Q = L ? R : (E ? w : Q );      
   end

endmodule // top_module



module flip_flop (
		   input  clk,
		   input  d, 
		   output q);
   always @(posedge clk) begin
	       
      q = d;      
   end

endmodule

module top_module (
    input clk,
    input x,
    output z
); 
   wire    ff1_d, ff2_d, ff3_d;
   wire    ff1_q, ff2_q, ff3_q;

   assign ff1_d = x ^ ff1_q;
   assign ff2_d = x & !ff2_q;
   assign ff3_d = x | !ff3_q;

    
   flip_flop ff1(clk, ff1_d, ff1_q);
   flip_flop ff2(clk, ff2_d, ff2_q);
       flip_flop ff3(clk, ff3_d, ff3_q);
      assign z = !(ff1_q | ff2_q | ff3_q);

endmodule




module flip_flop (
		   input  clk,
		   input  d, 
		   output q);
   always @(posedge clk) begin
	       
      q = d;      
   end

endmodule
module top_module (
    input clk,
    input j,
    input k,
    output Q); 

endmodule // top_module

module top_module (
    input clk,
    input [7:0] in,
    output [7:0] pedge
);
   reg [7:0] p_in // previous in
   always @(posedge clk) begin
      pedge[0]=1
   end
endmodule
