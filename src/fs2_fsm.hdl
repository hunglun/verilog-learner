module top_module(
    input clk,
    input [7:0] in,
    input reset,    // Synchronous reset
    output done); //

   reg [3:0] state, next_state;
   parameter BYTE1=0, BYTE2=1, BYTE3=2, DONE=3;
   
    // State transition logic (combinational)
   assign next_state[BYTE1] = in[3] == 0 & (state[DONE] | state[BYTE1]);
   assign next_state[BYTE2] = in[3] == 1 & (state[DONE] | state[BYTE1]);
   assign next_state[BYTE3] = state[BYTE2];
   assign next_state[DONE] = state[BYTE3];
   
			     
    // State flip-flops (sequential)
   always @(posedge clk) begin
      if(reset) state <= 'b0001;
      else   state <= next_state;      
   end
    // Output logic
   assign done = state[DONE];
   
endmodule
