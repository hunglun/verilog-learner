module top_module(
    input clk,
    input areset,    // Freshly brainwashed Lemmings walk left.
    input bump_left,
    input bump_right,
    input ground,
    input dig,
    output walk_left,
    output walk_right,
    output aaah,
    output digging ); 
   parameter LEFT=3'b00, RIGHT=3'b01, FALL_L=3'b10, FALL_R = 3'b11, DIG_L=3'b100, DIG_R=3'b101, SPLAT=3'b110;
   
   reg [2:0] 		 state, next_state;
   integer 		 fall_time;   
   always @(*) begin
      // State transition logic
      next_state = state;
      case(state)
	// Being bumped while falling does not affect the walking direction, and being bumped in the same cycle as ground disappears (but not yet falling), or when the ground reappears while still falling, also does not affect the walking direction.	 
	LEFT  : next_state = bump_left  ? (dig ? (ground? DIG_L : FALL_L) : (ground ? RIGHT: FALL_L)) : (dig ? (ground? DIG_L :FALL_L) : (ground ? LEFT : FALL_L));
	RIGHT : next_state = bump_right ? (dig ? (ground? DIG_R : FALL_R) : (ground ? LEFT : FALL_R)) : (dig ? (ground? DIG_L :FALL_R) : (ground ? RIGHT : FALL_R));
	FALL_L : next_state = ground ? (fall_time > 20 ? SPLAT : LEFT) : FALL_L ;
	FALL_R : next_state = ground ? (fall_time > 20 ? SPLAT : RIGHT) : FALL_R;
	DIG_L : next_state = !ground ? FALL_L : DIG_L  ;	
	DIG_R : next_state = !ground ? FALL_R : DIG_R ;
	SPLAT : next_state = SPLAT;	
      endcase // case (state)       
   end

   always @(posedge clk, posedge areset) begin
      // State flip-flops with asynchronous reset
      if(areset) begin 
	 state <= LEFT;
	 fall_time <= 0;	 
      end
      else begin 
	 state <= next_state;
	 fall_time <= !ground ? fall_time + 1 : 0;
      end
   end

   // Output logic
   assign walk_left = (state == LEFT);
   assign walk_right = (state == RIGHT);
   assign aaah = state == FALL_L | state == FALL_R;
   assign digging = state == DIG_L | state == DIG_R;
   
endmodule
