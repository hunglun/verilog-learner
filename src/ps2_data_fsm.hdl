module top_module(
    input 	clk,
    input [7:0] in,
    input 	reset, // Synchronous reset
    output [23:0] out_bytes,		  
    output 	done); //

   reg [3:0] state, next_state;
   parameter BYTE1=0, BYTE2=1, BYTE3=2, DONE=3;
   reg [23:0] out_bytes_reg;
   
    // State transition logic (combinational)
   assign next_state[BYTE1] = in[3] == 0 & (state[DONE] | state[BYTE1]);
   assign next_state[BYTE2] = in[3] == 1 & (state[DONE] | state[BYTE1]);
   assign next_state[BYTE3] = state[BYTE2];
   assign next_state[DONE] = state[BYTE3];
   
			     
    // State flip-flops (sequential)
   always @(posedge clk) begin
      if(reset) state <= 'b0001;
      else   begin 
	 state <= next_state;
	 out_bytes_reg <= {out_bytes_reg[15:0],in};	 
      end
   end
    // Output logic
   assign done = state[DONE];
   assign out_bytes = state[DONE] ? out_bytes_reg : {24{1'b0}};
   
   
endmodule
