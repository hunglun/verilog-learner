module top_module (
		   input       clk,
		   input       reset,
		   input [3:1] s,
		   output      fr3,
		   output      fr2,
		   output      fr1,
		   output      dfr
		   ); 

   parameter L0=3'b000,L1=3'b001,L2=3'b010,L3=3'b011;   
   
   reg [2:0] 		      prev_state, state, next_state;
   
   // State transition logic
   always@(*) begin
      next_state =  state;
      case(state)
	L0: next_state = s[1] ? L1 : L0 ;
	L1: next_state = s[2] ? L2 : (!s[1] ? L0 : L1) ;
	L2: next_state = s[3] ? L3 : (!s[2] ? L1 : L2) ;
	L3: next_state = !s[3] ? L2 : L3;	
      endcase // case (state)
      
   end
   // State flip-flops with asynchronous reset
   always @(posedge clk) begin    // This is a sequential always block
      // State flip-flops with asynchronous reset
      if (reset) state <= L0;
      else begin
	 prev_state <= state;	 
	 state <= next_state;
      end
   end

   // Output logic
   assign fr3 = state == L0;   
   assign fr2 = state == L0 | state == L1;
   assign fr1 = state == L0 | state == L1 | state == L2;
   assign dfr = prev_state >= state;   
   
endmodule
